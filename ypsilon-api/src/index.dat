(bytevector-c-int64-ref :procedure "(ypsilon c-types)" "retrieves an int64_t value from a bytevector")
(make-c-int16 :procedure "(ypsilon c-types)" "returns a bytevector contains an int16_t value")
(c-uint64-ref :procedure "(ypsilon c-types)" "retrieves an uint64_t value from a memory")
(bytevector-c-int32-ref :procedure "(ypsilon c-types)" "retrieves an int32_t value from a bytevector")
(alignof:bool :constant "(ypsilon c-types)" #f)
(c-int-set! :procedure "(ypsilon c-types)" "stores a int value to a memory")
(bytevector-c-int16-ref :procedure "(ypsilon c-types)" "retrieves an int16_t value from a bytevector")
(sizeof:void* :constant "(ypsilon c-types)" #f)
(alignof:int64_t :constant "(ypsilon c-types)" #f)
(bytevector-c-int8-ref :procedure "(ypsilon c-types)" "retrieves an int8_t value from a bytevector")
(sizeof:int :constant "(ypsilon c-types)" #f)
(alignof:int16_t :constant "(ypsilon c-types)" #f)
(bytevector-c-unsigned-long-long-ref :procedure "(ypsilon c-types)" "retrieves an unsigned long long value from a bytevector")
(sizeof:bool :constant "(ypsilon c-types)" #f)
(alignof:double :constant "(ypsilon c-types)" #f)
(bytevector-c-unsigned-long-ref :procedure "(ypsilon c-types)" "retrieves an unsigned long value from a bytevector")
(make-c-long-long :procedure "(ypsilon c-types)" "returns a bytevector contains a long long value")
(alignof:size_t :constant "(ypsilon c-types)" #f)
(bytevector-c-unsigned-int-ref :procedure "(ypsilon c-types)" "retrieves an unsigned int value from a bytevector")
(alignof:long :constant "(ypsilon c-types)" #f)
(c-void*-set! :procedure "(ypsilon c-types)" "stores a void* value to a memory")
(alignof:short :constant "(ypsilon c-types)" #f)
(bytevector-c-long-long-ref :procedure "(ypsilon c-types)" "retrieves a long long value from a bytevector")
(bytevector-c-void*-set! :procedure "(ypsilon c-types)" "stores a void* value to a bytevector")
(bytevector-c-long-ref :procedure "(ypsilon c-types)" "retrieves a long value from a bytevector")
(bytevector-c-int-ref :procedure "(ypsilon c-types)" "retrieves an int value from a bytevector")
(make-c-void* :procedure "(ypsilon c-types)" "returns a bytevector contains a void* value")
(bytevector-c-short-ref :procedure "(ypsilon c-types)" "retrieves a short value from a bytevector")
(MSG_MORE :constant "(ypsilon socket)" #f)
(make-stdcall-callout :procedure "(ypsilon ffi)" "is similar to make-cdecl-callout, but it uses the __stdcall calling convention")
(lookup-shared-object :procedure "(ypsilon ffi)" "returns an address corresponding to a symbol name in a shared object")
(bytevector-mapping? :procedure "(ypsilon ffi)" "returns #t if its argument is a bytevector-mapping object, and otherwise returns #f")
(make-c-int64 :procedure "(ypsilon c-types)" "returns a bytevector contains an int64_t value")
(load-shared-object :procedure "(ypsilon ffi)" "loads a shared object, and returns its handle")
(make-bytevector-mapping :procedure "(ypsilon ffi)" "provides transparent access to an arbitrary memory block")
(make-c-double :procedure "(ypsilon c-types)" "returns a bytevector contains a double value")
(make-c-bool :procedure "(ypsilon c-types)" "returns a bytevector contains a bool value")
(bytevector-c-unsigned-short-ref :procedure "(ypsilon c-types)" "retrieves an unsigned short value from a bytevector")
(on-darwin :constant "(ypsilon ffi)" #f)
(SOCK_STREAM :constant "(ypsilon socket)" #f)
(sizof:long-long :constant "(ypsilon c-types)" #f)
(make-c-float :procedure "(ypsilon c-types)" "returns a bytevector contains a float value")
(make-server-socket :procedure "(ypsilon socket)" "returns a server socket waiting for connections")
(c-void*-ref :procedure "(ypsilon c-types)" "retrieves a void* value from a memory")
(MSG_DONTROUTE :constant "(ypsilon socket)" #f)
(c-int-ref :procedure "(ypsilon c-types)" "retrieves an int value from a memory")
(shutdown-output-port :procedure "(ypsilon socket)" "shutdowns output connection of a socket that associated with a port")
(bytevector-c-double-set! :procedure "(ypsilon c-types)" "stores a double value to a bytevector")
(bytevector-c-long-long-set! :procedure "(ypsilon c-types)" "stores a long long value to a bytevector")
(c-int16-set! :procedure "(ypsilon c-types)" "stores a int16_t value to a memory")
(c-double-set! :procedure "(ypsilon c-types)" "stores a double value to a memory")
(c-int16-ref :procedure "(ypsilon c-types)" "retrieves an int16_t value from a memory")
(alignof:int8_t :constant "(ypsilon c-types)" #f)
(MSG_CONFIRM :constant "(ypsilon socket)" #f)
(c-unsigned-short-ref :procedure "(ypsilon c-types)" "retrieves an unsigned short value from a memory")
(AI_ALL :constant "(ypsilon socket)" #f)
(on-windows :constant "(ypsilon ffi)" #f)
(make-cdecl-callout :procedure "(ypsilon ffi)" "returns a closure that calls a foreign function using the __cdecl calling convention")
(socket-port :procedure "(ypsilon socket)" "returns a fresh binary input/output port associated with a socket")
(make-c-int8 :procedure "(ypsilon c-types)" "returns a bytevector contains an int8_t value")
(MSG_TRUNC :constant "(ypsilon socket)" #f)
(make-client-socket :procedure "(ypsilon socket)" "returns a client socket connected to an Internet address")
(on-freebsd :constant "(ypsilon ffi)" #f)
(MSG_CTRUNC :constant "(ypsilon socket)" #f)
(shared-object-win32-lasterror :parameter "(ypsilon ffi)" "is a parameter contains a copy of thread local win32 lasterror value")
(MSG_PEEK :constant "(ypsilon socket)" #f)
(make-stdcall-callback :procedure "(ypsilon ffi)" "is similar to make-cdecl-callback, but it uses the __stdcall calling convention")
(SHUT_RDWR :constant "(ypsilon socket)" #f)
(c-unsigned-long-long-ref :procedure "(ypsilon c-types)" "retrieves an unsigned long long value from a memory")
(MSG_NOSIGNAL :constant "(ypsilon socket)" #f)
(c-double-ref :procedure "(ypsilon c-types)" "retrieves a double value from a memory")
(c-function/errno :macro "(ypsilon ffi)" "is similar to c-function, but it transcribes a stub code that returns two values")
(alignof:long-long :constant "(ypsilon c-types)" #f)
(IPPROTO_UDP :constant "(ypsilon socket)" #f)
(make-c-string :procedure "(ypsilon c-types)" "returns a bytevector contains a C string")
(AI_ADDRCONFIG :constant "(ypsilon socket)" #f)
(win32-error->string :procedure "(ypsilon ffi)" "returns an error message string corresponding to a win32 error code")
(SHUT_RD :constant "(ypsilon socket)" #f)
(AI_V4MAPPED :constant "(ypsilon socket)" #f)
(c-unsigned-int-ref :procedure "(ypsilon c-types)" "retrieves an unsigned int value from a memory")
(AI_NUMERICHOST :constant "(ypsilon socket)" #f)
(c-unsigned-long-ref :procedure "(ypsilon c-types)" "retrieves an unsigned long value from a memory")
(AI_PASSIVE :constant "(ypsilon socket)" #f)
(c-long-long-set! :procedure "(ypsilon c-types)" "c-long-set! stores a long long value to a memory")
(SOCK_DGRAM :constant "(ypsilon socket)" #f)
(socket-shutdown :procedure "(ypsilon socket)" "shutdowns a socket")
(AF_INET6 :constant "(ypsilon socket)" #f)
(bytevector-c-short-set! :procedure "(ypsilon c-types)" "stores a short value to a bytevector")
(c-long-ref :procedure "(ypsilon c-types)" "retrieves a long value from a memory")
(AF_UNSPEC :constant "(ypsilon socket)" #f)
(c-bool-ref :procedure "(ypsilon c-types)" "retrieves a bool value from a memory")
(c-long-long-ref :procedure "(ypsilon c-types)" "retrieves a long long value from a memory")
(define-c-struct-type :macro "(ypsilon c-types)" "is a handy macro that combines define-c-typedef and define-c-struct-methods")
(sizeof:size_t :constant "(ypsilon c-types)" #f)
(make-c-long :procedure "(ypsilon c-types)" "returns a bytevector contains a long value")
(define-c-struct-methods :macro "(ypsilon c-types)" "defines a constructor, accessors, and mutators for a C structure type")
(sizeof:long :constant "(ypsilon c-types)" #f)
(c-string-ref :procedure "(ypsilon c-types)" "retrieves a C string from a memory")
(sizeof:short :constant "(ypsilon c-types)" #f)
(c-uint32-ref :procedure "(ypsilon c-types)" "retrieves an uint32_t value from a memory")
(MSG_OOB :constant "(ypsilon socket)" #f)
(alignof:float :constant "(ypsilon c-types)" #f)
(MSG_FIN :constant "(ypsilon socket)" #f)
(alignof:void* :constant "(ypsilon c-types)" #f)
(c-string-set! :procedure "(ypsilon c-types)" "stores a C string to a memory")
(alignof:int :constant "(ypsilon c-types)" #f)
(IPPROTO_TCP :constant "(ypsilon socket)" #f)
(socket-accept :procedure "(ypsilon socket)" "wait for an incoming connection request, and returns a fresh connected client socket")
(bytevector-c-uint32-ref :procedure "(ypsilon c-types)" "retrieves an uint32_t value from a bytevector")
(c-long-set! :procedure "(ypsilon c-types)" "stores a long value to a memory")
(MSG_ERRQUEUE :constant "(ypsilon socket)" #f)
(AI_CANONNAME :constant "(ypsilon socket)" #f)
(call-with-socket :procedure "(ypsilon socket)" "calls a procedure with a socket as an argument")
(socket? :procedure "(ypsilon socket)" "returns #t if its argument is a socket, and otherwise returns #f")
(alignof:int32_t :constant "(ypsilon c-types)" #f)
(IPPROTO_RAW :constant "(ypsilon socket)" #f)
(shared-object-errno :parameter "(ypsilon ffi)" "is a parameter contains a copy of thread local errno value")
(make-c-int :procedure "(ypsilon c-types)" "returns a bytevector contains an int value")
(MSG_PROBE :constant "(ypsilon socket)" #f)
(bytevector-c-int32-set! :procedure "(ypsilon c-types)" "stores an int32_t value to a bytevector")
(on-ppc32 :constant "(ypsilon ffi)" #f)
(c-function :macro "(ypsilon ffi)" "transcribes a stub code—lambda expression—that calls a C foreign function")
(c-bool-set! :procedure "(ypsilon c-types)" "stores a bool value to a memory")
(c-int8-set! :procedure "(ypsilon c-types)" "stores a int8_t value to a memory")
(c-int8-ref :procedure "(ypsilon c-types)" "retrieves an int8_t value from a memory")
(make-cdecl-callback :procedure "(ypsilon ffi)" "returns a C callback function pointer using the __cdecl calling convention")
(c-function/win32-lasterror :macro "(ypsilon ffi)" "is similar to c-function, but it transcribes a stub code that returns two values")
(c-coerce-void* :macro "(ypsilon c-types)" "coerces a C void* value to a C structure object")
(bytevector-c-strlen :procedure "(ypsilon c-types)" "returns a C string length of its contents")
(MSG_DONTWAIT :constant "(ypsilon socket)" #f)
(c-short-set! :procedure "(ypsilon c-types)" "stores a short value to a memory")
(define-c-enum :macro "(ypsilon c-types)" "defines a C enumeration constant")
(MSG_EOF :constant "(ypsilon socket)" #f)
(bytevector-c-float-set! :procedure "(ypsilon c-types)" "stores a float value to a bytevector")
(c-uint16-ref :procedure "(ypsilon c-types)" "retrieves an uint16_t value from a memory")
(bytevector-c-int64-set! :procedure "(ypsilon c-types)" "stores an int64_t value to a bytevector")
(MSG_RST :constant "(ypsilon socket)" #f)
(c-float-ref :procedure "(ypsilon c-types)" "retrieves a float value from a memory")
(SHUT_WR :constant "(ypsilon socket)" #f)
(c-int64-set! :procedure "(ypsilon c-types)" "stores a int64_t value to a memory")
(bytevector-c-int16-set! :procedure "(ypsilon c-types)" "stores an int16_t value to a bytevector")
(MSG_WAITALL :constant "(ypsilon socket)" #f)
(make-c-int32 :procedure "(ypsilon c-types)" "returns a bytevector contains an int32_t value")
(bytevector-c-int8-set! :procedure "(ypsilon c-types)" "stores an int8_t value to a bytevector")
(c-uint8-ref :procedure "(ypsilon c-types)" "retrieves an uint8_t value from a memory")
(c-int64-ref :procedure "(ypsilon c-types)" "retrieves an int64_t value from a memory")
(c-float-set! :procedure "(ypsilon c-types)" "stores a float value to a memory")
(on-linux :constant "(ypsilon ffi)" #f)
(bytevector-c-void*-ref :procedure "(ypsilon c-types)" "retrieves a void* value from a bytevector")
(on-x64 :constant "(ypsilon ffi)" #f)
(on-posix :constant "(ypsilon ffi)" #f)
(on-ppc64 :constant "(ypsilon ffi)" #f)
(bytevector-c-long-set! :procedure "(ypsilon c-types)" "stores a long value to a bytevector")
(MSG_SYN :constant "(ypsilon socket)" #f)
(define-c-typedef :macro "(ypsilon c-types)" "defines a C structure type")
(socket-close :procedure "(ypsilon socket)" "closes a socket")
(bytevector-c-int-set! :procedure "(ypsilon c-types)" "stores an int value to a bytevector")
(socket-recv :procedure "(ypsilon socket)" "receives a binary data block from a socket")
(c-int32-ref :procedure "(ypsilon c-types)" "retrieves an int32_t value from a memory")
(on-ia32 :constant "(ypsilon ffi)" #f)
(on-openbsd :constant "(ypsilon ffi)" #f)
(bytevector-c-double-ref :procedure "(ypsilon c-types)" "retrieves a double value from a bytevector")
(socket-send :procedure "(ypsilon socket)" "sends a binary data block to a socket")
(bytevector-c-float-ref :procedure "(ypsilon c-types)" "retrieves a float value from a bytevector")
(AI_NUMERICSERV :constant "(ypsilon socket)" #f)
(bytevector-c-uint64-ref :procedure "(ypsilon c-types)" "retrieves an uint64_t value from a bytevector")
(c-sizeof :macro "(ypsilon c-types)" "returns a byte size of C primitive or C structure type")
(MSG_EOR :constant "(ypsilon socket)" #f)
(make-c-short :procedure "(ypsilon c-types)" "returns a bytevector contains a short value")
(SOCK_RAW :constant "(ypsilon socket)" #f)
(bytevector-c-uint16-ref :procedure "(ypsilon c-types)" "retrieves an uint16_t value from a bytevector")
(c-short-ref :procedure "(ypsilon c-types)" "retrieves a short value from a memory")
(bytevector-c-uint8-ref :procedure "(ypsilon c-types)" "retrieves an uint8_t value from a bytevector")
(AF_INET :constant "(ypsilon socket)" #f)
(c-int32-set! :procedure "(ypsilon c-types)" "stores a int32_t value to a memory")
