(bytevector-c-int64-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\6 #\4 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int64-ref)
(on-freebsd (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\f #\r #\e #\e #\b #\s #\d))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-freebsd)
(bytevector-c-int32-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\3 #\2 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int32-ref)
(alignof:bool (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\b #\o #\o #\l))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:bool)
(make-c-long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-long)
(AF_INET6 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\F #\_ #\I #\N #\E #\T #\6))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AF_INET6)
(sizeof:void* (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\v #\o #\i #\d #\*))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:void*)
(alignof:int64_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\i #\n #\t #\6 #\4 #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:int64_t)
(bytevector-c-int8-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\8 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int8-ref)
(make-c-float (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\f #\l #\o #\a #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-float)
(on-ppc32 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\p #\p #\c #\3 #\2))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-ppc32)
(bytevector-c-unsigned-long-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-unsigned-long-long-ref)
(sizeof:bool (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\b #\o #\o #\l))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:bool)
(alignof:double (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\d #\o #\u #\b #\l #\e))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:double)
(bytevector-c-unsigned-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-unsigned-long-ref)
(sizeof:int (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\i #\n #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:int)
(alignof:size_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\s #\i #\z #\e #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:size_t)
(bytevector-c-unsigned-int-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\i #\n #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-unsigned-int-ref)
(alignof:void* (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\v #\o #\i #\d #\*))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:void*)
(c-string-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\s #\t #\r #\i #\n #\g #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-string-set!)
(AI_NUMERICSERV (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\N #\U #\M #\E #\R #\I #\C #\S #\E #\R #\V))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_NUMERICSERV)
(alignof:short (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\s #\h #\o #\r #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:short)
(bytevector-c-long-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-long-long-ref)
(c-int64-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\6 #\4 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int64-set!)
(bytevector-c-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-long-ref)
(make-c-double (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\d #\o #\u #\b #\l #\e))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-double)
(bytevector-c-int-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int-ref)
(bytevector-c-uint8-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\i #\n #\t #\8 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-uint8-ref)
(make-c-int8 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\i #\n #\t #\8))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-int8)
(bytevector-c-short-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\s #\h #\o #\r #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-short-ref)
(make-c-int16 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\i #\n #\t #\1 #\6))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-int16)
(c-uint32-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\i #\n #\t #\3 #\2 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-uint32-ref)
(lookup-shared-object (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\l #\o #\o #\k #\u #\p #\- #\s #\h #\a #\r #\e #\d #\- #\o #\b #\j #\e #\c #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" lookup-shared-object)
(bytevector-mapping? (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\m #\a #\p #\p #\i #\n #\g #\?))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" bytevector-mapping?)
(c-long-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\l #\o #\n #\g #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-long-set!)
(load-shared-object (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\l #\o #\a #\d #\- #\s #\h #\a #\r #\e #\d #\- #\o #\b #\j #\e #\c #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" load-shared-object)
(make-bytevector-mapping (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\m #\a #\p #\p #\i #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-bytevector-mapping)
(on-posix (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\p #\o #\s #\i #\x))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-posix)
(on-x64 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\x #\6 #\4))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-x64)
(bytevector-c-unsigned-short-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\s #\h #\o #\r #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-unsigned-short-ref)
(bytevector-c-long-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\l #\o #\n #\g #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-long-set!)
(c-int16-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\1 #\6 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int16-set!)
(make-c-short (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\s #\h #\o #\r #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-short)
(AF_UNSPEC (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\F #\_ #\U #\N #\S #\P #\E #\C))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AF_UNSPEC)
(make-cdecl-callback (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\d #\e #\c #\l #\- #\c #\a #\l #\l #\b #\a #\c #\k))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" make-cdecl-callback)
(define-c-struct-methods (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\d #\e #\f #\i #\n #\e #\- #\c #\- #\s #\t #\r #\u #\c #\t #\- #\m #\e #\t #\h #\o #\d #\s))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" define-c-struct-methods)
(c-long-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-long-long-ref)
(make-c-long-long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-long-long)
(shutdown-output-port (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\h #\u #\t #\d #\o #\w #\n #\- #\o #\u #\t #\p #\u #\t #\- #\p #\o #\r #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" shutdown-output-port)
(c-function/errno (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\f #\u #\n #\c #\t #\i #\o #\n #\/ #\e #\r #\r #\n #\o))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" c-function/errno)
(MSG_MORE (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\M #\O #\R #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_MORE)
(c-string-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\s #\t #\r #\i #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-string-ref)
(MSG_ERRQUEUE (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\E #\R #\R #\Q #\U #\E #\U #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_ERRQUEUE)
(define-c-typedef (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\d #\e #\f #\i #\n #\e #\- #\c #\- #\t #\y #\p #\e #\d #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" define-c-typedef)
(call-with-socket (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\a #\l #\l #\- #\w #\i #\t #\h #\- #\s #\o #\c #\k #\e #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" call-with-socket)
(MSG_CONFIRM (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\C #\O #\N #\F #\I #\R #\M))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_CONFIRM)
(c-unsigned-long-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-unsigned-long-long-ref)
(MSG_FIN (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\F #\I #\N))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_FIN)
(make-server-socket (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\s #\e #\r #\v #\e #\r #\- #\s #\o #\c #\k #\e #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" make-server-socket)
(alignof:long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:long)
(MSG_EOR (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\E #\O #\R))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_EOR)
(make-c-bool (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\b #\o #\o #\l))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-bool)
(MSG_TRUNC (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\T #\R #\U #\N #\C))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_TRUNC)
(c-function/win32-lasterror (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\f #\u #\n #\c #\t #\i #\o #\n #\/ #\w #\i #\n #\3 #\2 #\- #\l #\a #\s #\t #\e #\r #\r #\o #\r))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" c-function/win32-lasterror)
(socket? (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\?))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket?)
(MSG_CTRUNC (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\C #\T #\R #\U #\N #\C))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_CTRUNC)
(shared-object-errno (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\h #\a #\r #\e #\d #\- #\o #\b #\j #\e #\c #\t #\- #\e #\r #\r #\n #\o))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" shared-object-errno)
(make-c-int64 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\i #\n #\t #\6 #\4))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-int64)
(MSG_PEEK (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\P #\E #\E #\K))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_PEEK)
(make-c-void* (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\v #\o #\i #\d #\*))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-void*)
(c-uint8-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\i #\n #\t #\8 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-uint8-ref)
(c-unsigned-int-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\i #\n #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-unsigned-int-ref)
(MSG_NOSIGNAL (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\N #\O #\S #\I #\G #\N #\A #\L))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_NOSIGNAL)
(SHUT_RD (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\H #\U #\T #\_ #\R #\D))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SHUT_RD)
(make-cdecl-callout (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\d #\e #\c #\l #\- #\c #\a #\l #\l #\o #\u #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" make-cdecl-callout)
(alignof:long-long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\l #\o #\n #\g #\- #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:long-long)
(IPPROTO_UDP (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\I #\P #\P #\R #\O #\T #\O #\_ #\U #\D #\P))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" IPPROTO_UDP)
(c-bool-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\b #\o #\o #\l #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-bool-ref)
(sizeof:long-long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\l #\o #\n #\g #\- #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:long-long)
(AI_ADDRCONFIG (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\A #\D #\D #\R #\C #\O #\N #\F #\I #\G))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_ADDRCONFIG)
(win32-error->string (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\w #\i #\n #\3 #\2 #\- #\e #\r #\r #\o #\r #\- #\& #\g #\t #\; #\s #\t #\r #\i #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" win32-error->string)
(AI_V4MAPPED (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\V #\4 #\M #\A #\P #\P #\E #\D))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_V4MAPPED)
(define-c-struct-type (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\d #\e #\f #\i #\n #\e #\- #\c #\- #\s #\t #\r #\u #\c #\t #\- #\t #\y #\p #\e))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" define-c-struct-type)
(AI_NUMERICHOST (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\N #\U #\M #\E #\R #\I #\C #\H #\O #\S #\T))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_NUMERICHOST)
(c-unsigned-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-unsigned-long-ref)
(AI_PASSIVE (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\P #\A #\S #\S #\I #\V #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_PASSIVE)
(make-stdcall-callout (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\s #\t #\d #\c #\a #\l #\l #\- #\c #\a #\l #\l #\o #\u #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" make-stdcall-callout)
(SOCK_DGRAM (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\O #\C #\K #\_ #\D #\G #\R #\A #\M))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SOCK_DGRAM)
(socket-shutdown (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\s #\h #\u #\t #\d #\o #\w #\n))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-shutdown)
(define-c-enum (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\d #\e #\f #\i #\n #\e #\- #\c #\- #\e #\n #\u #\m))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" define-c-enum)
(bytevector-c-short-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\s #\h #\o #\r #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-short-set!)
(socket-close (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\c #\l #\o #\s #\e))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-close)
(c-int-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int-set!)
(on-ia32 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\i #\a #\3 #\2))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-ia32)
(SOCK_STREAM (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\O #\C #\K #\_ #\S #\T #\R #\E #\A #\M))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SOCK_STREAM)
(sizeof:size_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\s #\i #\z #\e #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:size_t)
(c-int8-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\8 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int8-ref)
(sizeof:long (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\l #\o #\n #\g))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:long)
(c-short-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\s #\h #\o #\r #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-short-set!)
(SHUT_RDWR (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\H #\U #\T #\_ #\R #\D #\W #\R))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SHUT_RDWR)
(sizeof:short (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\i #\z #\e #\o #\f #\: #\s #\h #\o #\r #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" sizeof:short)
(alignof:int8_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\i #\n #\t #\8 #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:int8_t)
(alignof:int (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\i #\n #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:int)
(c-float-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\f #\l #\o #\a #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-float-set!)
(on-linux (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\l #\i #\n #\u #\x))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-linux)
(on-ppc64 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\p #\p #\c #\6 #\4))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-ppc64)
(c-short-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\s #\h #\o #\r #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-short-ref)
(alignof:float (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\f #\l #\o #\a #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:float)
(socket-send (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\s #\e #\n #\d))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-send)
(c-sizeof (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\s #\i #\z #\e #\o #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-sizeof)
(on-openbsd (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\o #\p #\e #\n #\b #\s #\d))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-openbsd)
(c-long-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\l #\o #\n #\g #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-long-ref)
(c-double-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\d #\o #\u #\b #\l #\e #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-double-ref)
(c-void*-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\v #\o #\i #\d #\* #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-void*-set!)
(alignof:int32_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\i #\n #\t #\3 #\2 #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:int32_t)
(c-int16-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\1 #\6 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int16-ref)
(c-long-long-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-long-long-set!)
(make-c-int (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\i #\n #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-int)
(MSG_PROBE (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\P #\R #\O #\B #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_PROBE)
(c-float-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\f #\l #\o #\a #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-float-ref)
(on-windows (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\w #\i #\n #\d #\o #\w #\s))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-windows)
(bytevector-c-float-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\f #\l #\o #\a #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-float-set!)
(c-int32-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\3 #\2 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int32-set!)
(MSG_OOB (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\O #\O #\B))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_OOB)
(make-client-socket (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\l #\i #\e #\n #\t #\- #\s #\o #\c #\k #\e #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" make-client-socket)
(shared-object-win32-lasterror (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\h #\a #\r #\e #\d #\- #\o #\b #\j #\e #\c #\t #\- #\w #\i #\n #\3 #\2 #\- #\l #\a #\s #\t #\e #\r #\r #\o #\r))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" shared-object-win32-lasterror)
(c-uint16-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\i #\n #\t #\1 #\6 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-uint16-ref)
(bytevector-c-strlen (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\s #\t #\r #\l #\e #\n))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-strlen)
(c-int32-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\3 #\2 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int32-ref)
(bytevector-c-double-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\d #\o #\u #\b #\l #\e #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-double-set!)
(MSG_EOF (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\E #\O #\F))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_EOF)
(bytevector-c-int16-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\1 #\6 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int16-ref)
(socket-port (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\p #\o #\r #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-port)
(bytevector-c-int64-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\6 #\4 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int64-set!)
(c-uint64-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\i #\n #\t #\6 #\4 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-uint64-ref)
(MSG_RST (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\R #\S #\T))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_RST)
(c-coerce-void* (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\c #\o #\e #\r #\c #\e #\- #\v #\o #\i #\d #\*))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-coerce-void*)
(c-unsigned-short-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\u #\n #\s #\i #\g #\n #\e #\d #\- #\s #\h #\o #\r #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-unsigned-short-ref)
(MSG_SYN (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\S #\Y #\N))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_SYN)
(bytevector-c-int16-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\1 #\6 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int16-set!)
(MSG_WAITALL (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\W #\A #\I #\T #\A #\L #\L))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_WAITALL)
(bytevector-c-int8-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\8 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int8-set!)
(bytevector-c-uint32-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\i #\n #\t #\3 #\2 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-uint32-ref)
(MSG_DONTWAIT (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\D #\O #\N #\T #\W #\A #\I #\T))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_DONTWAIT)
(make-c-int32 (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\c #\- #\i #\n #\t #\3 #\2))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" make-c-int32)
(c-function (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\f #\u #\n #\c #\t #\i #\o #\n))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" c-function)
(bytevector-c-void*-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\v #\o #\i #\d #\* #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-void*-ref)
(c-int-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int-ref)
(MSG_DONTROUTE (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\M #\S #\G #\_ #\D #\O #\N #\T #\R #\O #\U #\T #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" MSG_DONTROUTE)
(bytevector-c-long-long-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\l #\o #\n #\g #\- #\l #\o #\n #\g #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-long-long-set!)
(bytevector-c-uint16-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\i #\n #\t #\1 #\6 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-uint16-ref)
(socket-accept (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\a #\c #\c #\e #\p #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-accept)
(make-stdcall-callback (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\m #\a #\k #\e #\- #\s #\t #\d #\c #\a #\l #\l #\- #\c #\a #\l #\l #\b #\a #\c #\k))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" make-stdcall-callback)
(SHUT_WR (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\H #\U #\T #\_ #\W #\R))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SHUT_WR)
(bytevector-c-int-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int-set!)
(alignof:int16_t (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\a #\l #\i #\g #\n #\o #\f #\: #\i #\n #\t #\1 #\6 #\_ #\t))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" alignof:int16_t)
(IPPROTO_RAW (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\I #\P #\P #\R #\O #\T #\O #\_ #\R #\A #\W))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" IPPROTO_RAW)
(socket-recv (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\s #\o #\c #\k #\e #\t #\- #\r #\e #\c #\v))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" socket-recv)
(IPPROTO_TCP (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\I #\P #\P #\R #\O #\T #\O #\_ #\T #\C #\P))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" IPPROTO_TCP)
(bytevector-c-double-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\d #\o #\u #\b #\l #\e #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-double-ref)
(AI_ALL (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\A #\L #\L))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_ALL)
(bytevector-c-float-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\f #\l #\o #\a #\t #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-float-ref)
(bytevector-c-int32-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\i #\n #\t #\3 #\2 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-int32-set!)
(c-int64-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\6 #\4 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int64-ref)
(bytevector-c-uint64-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\u #\i #\n #\t #\6 #\4 #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-uint64-ref)
(bytevector-c-void*-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\b #\y #\t #\e #\v #\e #\c #\t #\o #\r #\- #\c #\- #\v #\o #\i #\d #\* #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" bytevector-c-void*-set!)
(AI_CANONNAME (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\I #\_ #\C #\A #\N #\O #\N #\N #\A #\M #\E))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AI_CANONNAME)
(on-darwin (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\o #\n #\- #\d #\a #\r #\w #\i #\n))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.ffi.html" on-darwin)
(SOCK_RAW (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\S #\O #\C #\K #\_ #\R #\A #\W))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" SOCK_RAW)
(c-int8-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\i #\n #\t #\8 #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-int8-set!)
(c-double-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\d #\o #\u #\b #\l #\e #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-double-set!)
(c-bool-set! (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\b #\o #\o #\l #\- #\s #\e #\t #\!))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-bool-set!)
(AF_INET (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\A #\F #\_ #\I #\N #\E #\T))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.socket.html" AF_INET)
(c-void*-ref (:sub (:or (:seq (:or (:seq :bos) (:seq (:one-of-chars #\( #\) :space))) (:sub (:or (:seq #\c #\- #\v #\o #\i #\d #\* #\- #\r #\e #\f))) (:or (:seq (:one-of-chars #\( #\) #\. #\, :space)))))) "libref.ypsilon.c-types.html" c-void*-ref)
